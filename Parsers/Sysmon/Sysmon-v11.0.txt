// KQL Sysmon Event Parser
// Last Updated Date: Sept 25,  2020
// Sysmon Version: 11.0, Binary Version : 9.20 , Schema Version: 4.30
//
// Sysmon Instructions:
// If you want to print configuration schema definition of sysmon. Execute below command from command shell or powershell terminal
// Sysmon.exe -s
//
// You can further customize config XML definition and install sysmon with it via below command.
// Sample Sysmon config XML from Swift on Security's GitHub page : https://github.com/SwiftOnSecurity/sysmon-config/blob/master/sysmonconfig-export.xml
// To parse DNS Events with sysmon 10, use alpha version: https://github.com/SwiftOnSecurity/sysmon-config/blob/master/z-AlphaVersion.xml
// Sysmon.exe -i sysmonconfig-export.xml -accepteula -h sha1,md5,sha256 -n -l
// -n : Log all network connections and -l: log loading of modules.
//
// Parser Notes:
// 1. This parser works against the sysmon version 10, it may need updates if Sysmon is updated with new events or schema changes.
// 2. technique_id and technique_name will only be parsed/available if deployed via above mentioned sample sysmon XML config.
// 3. Make sure to use alpha version to parse DNS Events if you are using Sysmon v 10 or higher.
//
// Usage Instruction :
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias (e.g. Sysmon_Normalized).
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. Sysmon_Normalized | take 10).
// References :
// Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// Tech Community Blog on KQL Functions : https://techcommunity.microsoft.com/t5/Azure-Sentinel/Using-KQL-functions-to-speed-up-analysis-in-Azure-Sentinel/ba-p/712381
//
//
let EventData = Event
    | where Source == "Microsoft-Windows-Sysmon"
    | extend RenderedDescription = tostring(split(RenderedDescription, ":")[0])
    | project TimeGenerated, Source, EventID, Computer, UserName, EventData, RenderedDescription
    | extend EvData = parse_xml(EventData)
    | extend EventDetail = EvData.DataItem.EventData.Data
    | project-away EventData, EvData;
let SysmonEvent1_ProcessCreate=() {
    let processEvents = EventData
        | where EventID == 1
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"]),
            FileVersion = tostring(EventDetail.[5].["#text"]),
            Description = tostring(EventDetail.[6].["#text"]),
            Product = tostring(EventDetail.[7].["#text"]),
            Company = tostring(EventDetail.[8].["#text"]),
            OriginalFileName = tostring(EventDetail.[9].["#text"]),
            CommandLine = tostring(EventDetail.[10].["#text"]),
            CurrentDirectory = tostring(EventDetail.[11].["#text"]),
            User = tostring(EventDetail.[12].["#text"]),
            LogonGuid = tostring(EventDetail.[13].["#text"]),
            LogonId = tolong(EventDetail.[14].["#text"]),
            TerminalSessionId = tolong(EventDetail.[15].["#text"]),
            IntegrityLevel = tostring(EventDetail.[16].["#text"]),
            Hashes = EventDetail.[17].["#text"],
            ParentProcessGuid = tostring(EventDetail.[18].["#text"]),
            ParentProcessId = tolong(EventDetail.[19].["#text"]),
            ParentImage = tostring(EventDetail.[20].["#text"]),
            ParentCommandLine = tostring(EventDetail.[21].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | extend Hashes = extract_all(@"(?P<key>\w+)=(?P<value>[a-zA-Z0-9]+)", dynamic(["key", "value"]), Hashes)
        | mv-apply Hashes on (summarize ParsedHashes = make_bag(pack(tostring(Hashes[0]), tostring(Hashes[1]))))
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent2_FileCreateTime=() {
    let processEvents = EventData
        | where EventID == 2
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"]),
            TargetFilename = tostring(EventDetail.[5].["#text"]),
            CreationUtcTime = todatetime(EventDetail.[6].["#text"]),
            PreviousCreationUtcTime = todatetime(EventDetail.[7].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | extend Hashes = extract_all(@"(?P<key>\w+)=(?P<value>[a-zA-Z0-9]+)", dynamic(["key", "value"]), Hashes)
        | mv-apply Hashes on (summarize ParsedHashes = make_bag(pack(tostring(Hashes[0]), tostring(Hashes[1]))))
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent3_NetworkConnect=() {
    let processEvents = EventData
        | where EventID == 3
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"]),
            User = tostring(EventDetail.[5].["#text"]),
            Protocol = tostring(EventDetail.[6].["#text"]),
            Initiated = tostring(EventDetail.[7].["#text"]),
            SourceIsIpv6 = tostring(EventDetail.[8].["#text"]),
            SourceIp = tostring(EventDetail.[9].["#text"]),
            SourceHostname = tostring(EventDetail.[10].["#text"]),
            SourcePort = tolong(EventDetail.[11].["#text"]),
            SourcePortName = tostring(EventDetail.[12].["#text"]),
            DestinationIsIpv6 = tostring(EventDetail.[13].["#text"]),
            DestinationIp = tostring(EventDetail.[14].["#text"]),
            DestinationHostname = tostring(EventDetail.[15].["#text"]),
            DestinationPort = tolong(EventDetail.[16].["#text"]),
            DestinationPortName = tostring(EventDetail.[17].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent4_ServiceStateChange=() {
    let processEvents = EventData
        | where EventID == 4
        | extend
            UtcTime = todatetime(EventDetail.[0].["#text"]),
            State = tostring(EventDetail.[1].["#text"]),
            Schema = tostring(EventDetail.[2].["#text"]),
            SchemaVersion = tostring(EventDetail.[3].["#text"])
        | project-away EventDetail;
    processEvents;
};
let SysmonEvent5_ProcessTerminate=() {
    let processEvents = EventData
        | where EventID == 5
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent6_DriverLoad=() {
    let processEvents = EventData
        | where EventID == 6
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ImageLoaded = tostring(EventDetail.[2].["#text"]),
            Hashes = EventDetail.[3].["#text"],
            Signed = tostring(EventDetail.[4].["#text"]),
            Signature = tostring(EventDetail.[5].["#text"]),
            SignatureStatus = tostring(EventDetail.[6].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | extend Hashes = extract_all(@"(?P<key>\w+)=(?P<value>[a-zA-Z0-9]+)", dynamic(["key", "value"]), Hashes)
        | mv-apply Hashes on (summarize ParsedHashes = make_bag(pack(tostring(Hashes[0]), tostring(Hashes[1]))))
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent7_ImageLoad=() {
    let processEvents = EventData
        | where EventID == 7
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"]),
            ImageLoaded = tostring(EventDetail.[5].["#text"]),
            FileVersion = tostring(EventDetail.[6].["#text"]),
            Description = tostring(EventDetail.[7].["#text"]),
            Product = tostring(EventDetail.[8].["#text"]),
            Company = tostring(EventDetail.[9].["#text"]),
            OriginalFileName = tostring(EventDetail.[10].["#text"]),
            Hashes = EventDetail.[11].["#text"],
            Signed = tostring(EventDetail.[12].["#text"]),
            Signature = tostring(EventDetail.[13].["#text"]),
            SignatureStatus = tostring(EventDetail.[14].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | extend Hashes = extract_all(@"(?P<key>\w+)=(?P<value>[a-zA-Z0-9]+)", dynamic(["key", "value"]), Hashes)
        | mv-apply Hashes on (summarize ParsedHashes = make_bag(pack(tostring(Hashes[0]), tostring(Hashes[1]))))
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent8_CreateRemoteThread=() {
    let processEvents = EventData
        | where EventID == 8
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            SourceProcessGuid = tostring(EventDetail.[2].["#text"]),
            SourceProcessId = tolong(EventDetail.[3].["#text"]),
            SourceImage = tostring(EventDetail.[4].["#text"]),
            TargetProcessGuid = tostring(EventDetail.[5].["#text"]),
            TargetProcessId = tolong(EventDetail.[6].["#text"]),
            TargetImage = tostring(EventDetail.[7].["#text"]),
            NewThreadId = tolong(EventDetail.[8].["#text"]),
            StartAddress = tostring(EventDetail.[9].["#text"]),
            StartModule = tostring(EventDetail.[10].["#text"]),
            StartFunction = tostring(EventDetail.[11].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent9_RawAccessRead=() {
    let processEvents = EventData
        | where EventID == 9
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"]),
            Device = tostring(EventDetail.[5].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent10_ProcessAccess=() {
    let processEvents = EventData
        | where EventID == 10
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            SourceProcessGUID = tostring(EventDetail.[2].["#text"]),
            SourceProcessId = tolong(EventDetail.[3].["#text"]),
            SourceThreadId = tolong(EventDetail.[4].["#text"]),
            SourceImage = tostring(EventDetail.[5].["#text"]),
            TargetProcessGUID = tostring(EventDetail.[6].["#text"]),
            TargetProcessId = tolong(EventDetail.[7].["#text"]),
            TargetImage = tostring(EventDetail.[8].["#text"]),
            GrantedAccess = tostring(EventDetail.[9].["#text"]),
            CallTrace = tostring(EventDetail.[10].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent11_FileCreate=() {
    let processEvents = EventData
        | where EventID == 11
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"]),
            TargetFilename = tostring(EventDetail.[5].["#text"]),
            CreationUtcTime = todatetime(EventDetail.[6].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent12_RegistryObjectAddDel=() {
    let processEvents = EventData
        | where EventID == 12
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            ProcessGuid = tostring(EventDetail.[3].["#text"]),
            ProcessId = tolong(EventDetail.[4].["#text"]),
            Image = tostring(EventDetail.[5].["#text"]),
            TargetObject = tostring(EventDetail.[6].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent13_RegistrySetValue=() {
    let processEvents = EventData
        | where EventID == 13
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            ProcessGuid = tostring(EventDetail.[3].["#text"]),
            ProcessId = tolong(EventDetail.[4].["#text"]),
            Image = tostring(EventDetail.[5].["#text"]),
            TargetObject = tostring(EventDetail.[6].["#text"]),
            Details = tostring(EventDetail.[7].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent14_RegistryObjectRename=() {
    let processEvents = EventData
        | where EventID == 14
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            ProcessGuid = tostring(EventDetail.[3].["#text"]),
            ProcessId = tolong(EventDetail.[4].["#text"]),
            Image = tostring(EventDetail.[5].["#text"]),
            TargetObject = tostring(EventDetail.[6].["#text"]),
            NewName = tostring(EventDetail.[7].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent15_FileCreateStreamHash=() {
    let processEvents = EventData
        | where EventID == 15
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            Image = tostring(EventDetail.[4].["#text"]),
            TargetFileName = tostring(EventDetail.[5].["#text"]),
            CreationUtcTime = todatetime(EventDetail.[6].["#text"]),
            Hash = tostring(EventDetail.[7].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent16_ConfigChange=() {
    let processEvents = EventData
        | where EventID == 16
        | extend
            UtcTime = todatetime(EventDetail.[0].["#text"]),
            Configuration = tostring(EventDetail.[1].["#text"]),
            ConfigurationFileHash = tostring(EventDetail.[2].["#text"])
        | project-away EventDetail;
    processEvents;
};
let SysmonEvent17_CreateNamedPipe=() {
    let processEvents = EventData
        | where EventID == 17
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            ProcessGuid = tostring(EventDetail.[3].["#text"]),
            ProcessId = tolong(EventDetail.[4].["#text"]),
            PipeName = tostring(EventDetail.[5].["#text"]),
            Image = tostring(EventDetail.[6].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent18_ConnectNamedPipe=() {
    let processEvents = EventData
        | where EventID == 18
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            ProcessGuid = tostring(EventDetail.[3].["#text"]),
            ProcessId = tolong(EventDetail.[4].["#text"]),
            PipeName = tostring(EventDetail.[5].["#text"]),
            Image = tostring(EventDetail.[6].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent19_WMIEventFilter=() {
    let processEvents = EventData
        | where EventID == 19
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            Operation = tostring(EventDetail.[3].["#text"]),
            User = tostring(EventDetail.[4].["#text"]),
            EventNamespace = tostring(EventDetail.[5].["#text"]),
            Name = tostring(EventDetail.[6].["#text"]),
            Query = tostring(EventDetail.[7].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent20_WMIEventConsumer=() {
    let processEvents = EventData
        | where EventID == 20
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            Operation = tostring(EventDetail.[3].["#text"]),
            User = tostring(EventDetail.[4].["#text"]),
            Name = tostring(EventDetail.[5].["#text"]),
            Type = tostring(EventDetail.[6].["#text"]),
            Destination = tostring(EventDetail.[7].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent21_WMIEventConsumerToFilter=() {
    let processEvents = EventData
        | where EventID == 21
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            EventType = tostring(EventDetail.[1].["#text"]),
            UtcTime = todatetime(EventDetail.[2].["#text"]),
            Operation = tostring(EventDetail.[3].["#text"]),
            User = tostring(EventDetail.[4].["#text"]),
            Consumer = tostring(EventDetail.[5].["#text"]),
            Filter = tostring(EventDetail.[6].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent22_DNSEvents=() {
    let processEvents = EventData
        | where EventID == 22
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            QueryName = tostring(EventDetail.[4].["#text"]),
            QueryStatus = tostring(EventDetail.[5].["#text"]),
            QueryResults = tostring(EventDetail.[6].["#text"]),
            Image = tostring(EventDetail.[7].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | project-away EventDetail, RuleName;
    processEvents;
};
let SysmonEvent23_FileDeleteEvents=() {
    let processEvents = EventData
        | where EventID == 23
        | extend
            RuleName = tostring(EventDetail.[0].["#text"]),
            UtcTime = todatetime(EventDetail.[1].["#text"]),
            ProcessGuid = tostring(EventDetail.[2].["#text"]),
            ProcessId = tolong(EventDetail.[3].["#text"]),
            User = tostring(EventDetail.[4].["#text"]),
            Image = tostring(EventDetail.[5].["#text"]),
            TargetFilename = tostring(EventDetail.[6].["#text"]),
            Hashes = EventDetail.[7].["#text"],
            IsExecutable = tobool(EventDetail.[8].["#text"]),
            Archived = tostring(EventDetail.[9].["#text"])
        | parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
        | extend Hashes = extract_all(@"(?P<key>\w+)=(?P<value>[a-zA-Z0-9]+)", dynamic(["key", "value"]), Hashes)
        | mv-apply Hashes on (summarize ParsedHashes = make_bag(pack(tostring(Hashes[0]), tostring(Hashes[1]))))
        | project-away EventDetail, RuleName;
    processEvents;
};
(
    union isfuzzy=true
        SysmonEvent1_ProcessCreate,
        SysmonEvent2_FileCreateTime,
        SysmonEvent3_NetworkConnect,
        SysmonEvent4_ServiceStateChange,
        SysmonEvent5_ProcessTerminate,
        SysmonEvent6_DriverLoad,
        SysmonEvent7_ImageLoad,
        SysmonEvent8_CreateRemoteThread,
        SysmonEvent9_RawAccessRead,
        SysmonEvent10_ProcessAccess,
        SysmonEvent11_FileCreate,
        SysmonEvent12_RegistryObjectAddDel,
        SysmonEvent13_RegistrySetValue,
        SysmonEvent14_RegistryObjectRename,
        SysmonEvent15_FileCreateStreamHash,
        SysmonEvent16_ConfigChange,
        SysmonEvent17_CreateNamedPipe,
        SysmonEvent18_ConnectNamedPipe,
        SysmonEvent19_WMIEventFilter,
        SysmonEvent20_WMIEventConsumer,
        SysmonEvent21_WMIEventConsumerToFilter,
        SysmonEvent22_DNSEvents,
        SysmonEvent23_FileDeleteEvents
)
| extend
    Archived = column_ifexists("Archived", tostring("")),
    CommandLine = column_ifexists("CommandLine", tostring("")),
    Company = column_ifexists("Company", tostring("")),
    CurrentDirectory = column_ifexists("CurrentDirectory", tostring("")),
    Description = column_ifexists("Description", tostring("")),
    Details = column_ifexists("Details", tostring("")),
    FileVersion = column_ifexists("FileVersion", tostring("")),
    Hashes = column_ifexists("Hashes", dynamic([])),
    ImageLoaded = column_ifexists("ImageLoaded", tostring("")),
    IntegrityLevel = column_ifexists("IntegrityLevel", tostring("")),
    IsExecutable = column_ifexists("IsExecutable", tobool("")),
    LogonGuid = column_ifexists("LogonGuid", tostring("")),
    LogonId = column_ifexists("LogonId", tolong("")),
    OriginalFileName = column_ifexists("OriginalFileName", tostring("")),
    ParentCommandLine = column_ifexists("ParentCommandLine", tostring("")),
    ParentImage = column_ifexists("ParentImage", tostring("")),
    ParentProcessGuid = column_ifexists("ParentProcessGuid", tostring("")),
    ParentProcessId = column_ifexists("ParentProcessId", tolong("")),
    ParsedHashes = column_ifexists("ParsedHashes", dynamic({})),
    PreviousCreationUtcTime=column_ifexists("PreviousCreationUtcTime", todatetime("")),
    Product = column_ifexists("Product", tostring("")),
    RuleName = column_ifexists("RuleName", tostring("")),
    Signature = column_ifexists("Signature", tostring("")),
    SignatureStatus = column_ifexists("SignatureStatus", tostring("")),
    Signed = column_ifexists("Signed", tostring("")),
    TerminalSessionId = column_ifexists("TerminalSessionId", tolong(""))
| project
    Archived,
    CallTrace,
    CommandLine,
    Company,
    Computer,
    Configuration,
    ConfigurationFileHash,
    Consumer,
    CreationUtcTime,
    CurrentDirectory,
    Description,
    Destination,
    DestinationHostname,
    DestinationIp,
    DestinationIsIpv6,
    DestinationPort,
    DestinationPortName,
    Details,
    Device,
    EventID,
    EventNamespace,
    EventType,
    FileVersion,
    Filter,
    GrantedAccess,
    Hash,
    Hashes,
    Image,
    ImageLoaded,
    Initiated,
    IntegrityLevel,
    IsExecutable,
    LogonGuid,
    LogonId,
    Name,
    NewName,
    NewThreadId,
    Operation,
    OriginalFileName,
    ParentCommandLine,
    ParentImage,
    ParentProcessGuid,
    ParentProcessId,
    ParsedHashes,
    PipeName,
    PreviousCreationUtcTime,
    ProcessGuid,
    ProcessId,
    Product,
    Protocol,
    Query,
    QueryName,
    QueryResults,
    QueryStatus,
    RenderedDescription,
    RuleName,
    Schema,
    SchemaVersion,
    Signature,
    SignatureStatus,
    Signed,
    Source,
    SourceHostname,
    SourceImage,
    SourceIp,
    SourceIsIpv6,
    SourcePort,
    SourcePortName,
    SourceProcessGuid,
    SourceProcessGUID,
    SourceProcessId,
    SourceThreadId,
    StartAddress,
    StartFunction,
    StartModule,
    State,
    TargetFilename,
    TargetFileName,
    TargetImage,
    TargetObject,
    TargetProcessGuid,
    TargetProcessGUID,
    TargetProcessId,
    TechniqueId,
    TechniqueName,
    TerminalSessionId,
    TimeGenerated,
    Type,
    User,
    UserName,
    UtcTime
